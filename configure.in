#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.57)
AC_INIT(netacct-mysql, 0.78.2, gerrit.boelz@iap.de, netacct-mysql, http://netacct-mysql.gabrovo.com/)
AM_INIT_AUTOMAKE(netacct-mysql, 0.78.2)
AC_CONFIG_SRCDIR([src/capture.c])
# Checks for programs.
AC_PROG_CC

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([arpa/inet.h fcntl.h limits.h malloc.h netinet/in.h stdlib.h string.h sys/file.h sys/ioctl.h sys/param.h sys/socket.h sys/time.h syslog.h unistd.h utmp.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_UID_T
AC_C_VOLATILE

# Checks for library functions.
AC_FUNC_FORK
AC_FUNC_MALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_SETVBUF_REVERSED
AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_CHECK_FUNCS([alarm memmove putenv select strcasecmp strchr strcspn strdup strerror strtol])

if test x"${prefix}" = x"NONE" ; then
 if test x"${sysconfdir}" = x"\${prefix}/etc"; then
  AC_DEFINE_UNQUOTED(DEF_ACCTTAB, "/etc/naccttab", "config file")
  AC_DEFINE_UNQUOTED(PEERING_FILE, "/etc/nacctpeering", "peering file")
 else
  AC_DEFINE_UNQUOTED(DEF_ACCTTAB, "${sysconfdir}/naccttab", "config file")
  AC_DEFINE_UNQUOTED(PEERING_FILE, "${sysconfdir}/nacctpeering", "peering file")
 fi
else
 if test x"${sysconfdir}" = x"\${prefix}/etc"; then
    AC_DEFINE_UNQUOTED(DEF_ACCTTAB, "${prefix}/etc/naccttab", "config file")
    AC_DEFINE_UNQUOTED(PEERING_FILE, "${prefix}/etc/nacctpeering", "peering file")
  else
   AC_DEFINE_UNQUOTED(DEF_ACCTTAB, "${sysconfdir}/naccttab", "config file")
   AC_DEFINE_UNQUOTED(PEERING_FILE, "${sysconfdir}/nacctpeering", "peering file")
 fi
fi

AC_CANONICAL_HOST
# check machine/os type
case "$host" in
 *linux*)
        OS="__FAVOR_BSD"
        AC_SUBST(OS)
        ;;
 *freebsd*)
        OS="_FreeBSD_"
        AC_SUBST(OS)
        ;;
 *openbsd*)
        OS="_OpenBSD_"
        AC_SUBST(OS)
        ;;
 *solaris2.*)
        OS="_Solaris_"
        AC_SUBST(OS)
        ;;
 *netbsd*)
 	OS="_NetBSD_"
	AC_SUBST(OS)
	;;
 *)
        OS="__FAVOR_BSD"
	AC_SUBST(OS)
        ;;
esac


# check for libpcap
AC_ARG_WITH(libpcap_includes,
        [  --with-libpcap-includes=DIR  libcap include directory],
        [with_libpcap_includes="$withval"],[with_libpcap_includes=no])

AC_ARG_WITH(libpcap_libraries,
        [  --with-libpcap-libraries=DIR  libcap library directory],
        [with_libpcap_libraries="$withval"],[with_libpcap_libraries=no])

if test "$with_libpcap_includes" != "no"; then
 CPPFLAGS="${CPPFLAGS} -I${with_libpcap_includes}"
fi

if test "$with_libpcap_libraries" != "no"; then
 LDFLAGS="${LDFLAGS}  -L${with_libpcap_libraries}"
fi

LPCAP=""
AC_CHECK_LIB(pcap, pcap_dispatch,, LPCAP="no")

if test "$LPCAP" = "no"; then
  echo
  echo "   ERROR!  Libpcap library/headers not found, go get it from"
  echo "   http://www.tcpdump.org/"
  echo "   or use the --with-libpcap-* options, if you have it installed"
  echo "   in unusual place"
  exit
fi
	    

# mysql check
# default dir to search for mysql (/usr/pkg is for netbsd)
default_directory="/usr /usr/local /usr/local/mysql /usr/pkg"

have_mysql=no
have_oracle=no

AC_ARG_WITH(mysql, [  --with-mysql=DIR        mysql install directory])

if test "$with_mysql" != "no"; then
  if test "$with_mysql" = "yes"; then
    mysql_directory="$default_directory"; mysql_fail="yes"
  elif test "$with_mysql" = ""; then
    mysql_directory="$default_directory"; mysql_fail="no"
  else
    mysql_directory="$with_mysql"; mysql_fail="yes"
  fi

  AC_MSG_CHECKING("for mysql")

  for i in $mysql_directory; do
    if test -r $i/include/mysql/mysql.h; then
      MYSQL_DIR=$i
      MYSQL_INC_DIR=$i/include/mysql
    elif test -r $i/include/mysql.h; then
      MYSQL_DIR=$i
      MYSQL_INC_DIR=$i/include
    fi
  done

  if test -z "$MYSQL_DIR"; then
    if test "$mysql_fail" != "no"; then
      tmp=""
      for i in $mysql_directory; do
        tmp="$tmp $i/include $i/include/mysql"
      done
      AC_MSG_ERROR("mysql headers", $tmp)
    else
      AC_MSG_RESULT(no)
      AC_MSG_RESULT([
       you don't have MySQL HEADERS, build process   
       will fail withous this!! try to install them. 
       mysql.h is missing ... perhaps you need to    
       to install mysql-*-dev package or try with    
       ./configure --with-mysql=/path/to/install/dir 
      
       .. THAT IS OK if you compiling with ORACLE ..
      ])

    fi
  else

    for i in mysql lib lib/x86_64-linux-gnu lib/mysql; do
      str="$MYSQL_DIR/$i/libmysqlclient.a"
      for j in `echo $str`; do
        if test -r $j; then
          MYSQL_LIB_DIR="$MYSQL_DIR/$i"
          break 2
        fi
      done
    done

    if test -z "$MYSQL_LIB_DIR"; then
      if test "$mysql_fail" != "no"; then
        AC_MSG_ERROR("mysqlclient library",
                     "$MYSQL_DIR/lib $MYSQL_DIR/lib/mysql")
      else
        AC_MSG_RESULT(no)
        AC_MSG_RESULT([
        +-----------------------------------------------+
        | you don't have mysql libraries, build process |
        | will fail withous this!! try to install them. |
        | libmysqlclient.a is missing ... or tyr        |
        | ./configure --with-mysql=/path/to/install/dir |
        +-----------------------------------------------+])
      fi
    else
      AC_MSG_RESULT(yes)
      LDFLAGS="${LDFLAGS} -L${MYSQL_LIB_DIR}"
# FIXME:   CPPFLAGS="${CPPFLAGS} -I${MYSQL_INC_DIR} -DENABLE_MYSQL"
      CPPFLAGS="${CPPFLAGS} -I${MYSQL_INC_DIR}"
      AC_CHECK_LIB(z, compress)
      LIBS="${LIBS} -Wl,-R${MYSQL_LIB_DIR} -lmysqlclient"
      have_mysql=yes
      AC_DEFINE(HAVE_MYSQL, "1", "Use MYSQL")
    fi
  fi
fi


dnl check if oracl's proc precomp is available
AC_ARG_WITH(oracle, [  --with-oracle=DIR        oracle home directory])

AC_MSG_CHECKING("for oracle home")
if test "$with_oracle" != "no"; then
        if test "$with_oracle" = "yes"; then
                if test -z "$ORACLE_HOME"; then
                        AC_MSG_RESULT(ORACLE_HOME not set, skip oralce support)
                else
                        with_oracle=$ORACLE_HOME
                        AC_MSG_RESULT($with_oracle)
                fi
        else
                AC_MSG_RESULT("$with_oracle")
                ORACLE_HOME=$with_oracle
                export ORACLE_HOME
        fi

        AC_SUBST(ORACLE_HOME)
        AC_MSG_CHECKING("for oracle pro*c")
        PROC="$ORACLE_HOME/bin/proc"

        if test ! -x "$PROC"; then
                AC_MSG_RESULT(no)
                PROC="cp /dev/null oracle.c"
        else
                procversion=`$PROC help | grep Release`
                if test -z "$procversion"; then
                        AC_MSG_ERROR("Cannot run $PROC")
                else
                        AC_MSG_RESULT($procversion)
                fi
                PROC="$PROC iname=oracle include=. include=.. || rm -f oracle.c"
                AC_SUBST(PROC)

                CPPFLAGS="$CPPFLAGS -I$ORACLE_HOME/precomp/public"
                CFLAGS="$CFLAGS -I$ORACLE_HOME/precomp/public"
                AC_CHECK_HEADER(sqlca.h)
                if test "$ac_cv_header_sqlca_h" != "yes"; then
                        AC_MSG_ERROR("oracle headers not found");
                fi

                LIBS="$LIBS -L$ORACLE_HOME/lib `cat /usr/oracle/product/8.1.7/lib/sysliblist`"
                AC_CHECK_LIB(clntsh, sqlcxt)

                AC_CHECK_HEADERS(string.h)
                AC_DEFINE(HAVE_ORACLE, "1", "Use ORACLE")
                have_oracle=yes
        fi
fi

if test $have_mysql != "yes" -a $have_oracle != "yes"; then
        AC_MSG_ERROR(No database support found .. SORRY cannot continue!)
fi

dnl
dnl EC_PTHREAD_CHECK()
dnl            ac_cv_ec_nopthread=1 (if fails)
dnl

AC_DEFUN(EC_PTHREAD_CHECK,[

   AC_SEARCH_LIBS(pthread_create, pthread,,
      [
         AC_MSG_CHECKING(whether $CC accepts -pthread)
         CFLAGS_store="$CFLAGS"
         AC_TRY_COMPILE([#include <pthread.h>],[pthread_create(NULL, NULL, NULL, NULL);],
            [AC_MSG_RESULT(yes)
	     LIBS="$LIBS -lpthread"],
            [AC_MSG_RESULT(no)
               CFLAGS="$CFLAGS_store"
               AC_MSG_WARN(***************************);
               AC_MSG_WARN(* PTHREAD ARE REQUIRED !! *);
               AC_MSG_WARN(***************************);
               exit
            ])
         unset CFLAGS_store
      ]
   )

   if test "$OS" = "_Solaris_" ; then
      AC_SEARCH_LIBS(_getfp, pthread,,)
   fi

])

if test "$OS" = "_OpenBSD_" ; then
	LIBS="$LIBS -Wl,-R/usr/local/lib"
	CFLAGS="$CFLAGS -I. -I.. -I/usr/local/include"
fi

if test "$OS" = "_FreeBSD_" ; then
	LIBS="$LIBS -Wl,-R/usr/local/lib -pthread"
	CFLAGS="$CFLAGS -I. -I.. -D_REENTRANT -D_THREAD_SAFE"
fi

if test "$OS" = "_NetBSD_" ; then
	LIBS="$LIBS -Wl,-R/usr/pkg/lib -lpthread"
	CFLAGS="$CFLAGS -I. -I.. -I/usr/pkg/include -L/usr/pkg/lib"
fi

if test "$OS" = "__FAVOR_BSD" ; then
        LIBS="$LIBS -Wl,-R/usr/lib -lpthread"
	CFLAGS="$CFLAGS -I/usr/include -L/usr/lib"
fi
		

EC_PTHREAD_CHECK()

AM_CONFIG_HEADER(config.h)
AC_OUTPUT(src/Makefile Makefile)
